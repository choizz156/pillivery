spring:
  config:
    activate:
      on-profile: local

  jpa:
    properties:
      hibernate:
        jdbc:
          batch_size: 100
        order_inserts: true
        format_sql: true
        dialect: org.hibernate.dialect.MySQL8Dialect
        hbm2ddl:
          auto: none
        show_sql: true
        physical_naming_strategy: org.hibernate.boot.model.naming.CamelCaseToUnderscoresNamingStrategy
        default_batch_fetch_size: 100
    open-in-view: false

  data:
    redis:
      host: localhost
      port: 6380

  datasource:
    #    main:
    #      username: admin
    #      password: 1234
    #      driver-class-name: com.mysql.cj.jdbc.Driver
    #      jdbc-url: jdbc:mysql://192.168.0.6:3306/pillivery?serverTimezone=Asia/Seoul&jdbcCompliantTruncation=false&rewriteBatchedStatements=true

    #      username: root
    #      password: 1234
    #      driver-class-name: com.mysql.cj.jdbc.Driver
    #      url: jdbc:mysql://host.docker.internal:3306/pillivery?serverTimezone=Asia/Seoul&jdbcCompliantTruncation=false&rewriteBatchedStatements=true
    #      url: jdbc:mysql://localhost:3306/pillivery?serverTimezone=Asia/Seoul&jdbcCompliantTruncation=false&rewriteBatchedStatements=true

    url: jdbc:h2:mem:testdb
    username: sa
    password:
    driver-class-name: org.h2.Driver
  #
  security:
    oauth2:
      client:
        registration:
          google:
            client-id: 606086322984-lusr30r8j649fjrc12ta8sagdq6nh57s.apps.googleusercontent.com
            client-secret: sdfsdfsdfsdfsd
            scope:
              - email
              - profile

          kakao:
            client-id: bf330f4d3abf90b27373ed901544a58b
            client-secret: sdfsdfsdfsdfsd
            redirect-uri: http://localhost:8080/login/oauth2/code/kakao
            scope:
              - profile_nickname
              - account_email
            client-name: Kakao
            authorization-grant-type: authorization_code
            client-authentication-method: POST

        provider:
          kakao:
            authorization-uri: https://kauth.kakao.com/oauth/authorize
            token-uri: https://kauth.kakao.com/oauth/token
            user-info-uri: https://kapi.kakao.com/v2/user/me
            user-name-attribute: id

management:
  #  server:
  #    port: 8080
  health:
    circuitbreakers:
      enabled: true

  endpoint:
    shutdown:
      enabled: true
    health:
      show-details: always
    metrics:
      enabled: true
    prometheus:
      enabled: true
    caches:
      enabled: true

  endpoints:
    web:
      exposure:
        include: health, info, metrics, prometheus, caches, resilience4j.circuitbreakers


resilience4j:
  circuitbreaker:
    configs:
      default:
        registerHealthIndicator: true
        slidingWindowType: COUNT_BASED
        slidingWindowSize: 40
        minimumNumberOfCalls: 20
        failureRateThreshold: 75 # 재시도 횟수도 포함하기 때문에 더 넉넉하게 잡아야됨.
        waitDurationInOpenState: 10s
        permittedNumberOfCallsInHalfOpenState: 3
        automaticTransitionFromOpenToHalfOpenEnabled: true
        recordExceptions:
          - com.team33.moduleexternalapi.exception.ExternalApiException
          - org.springframework.web.reactive.function.client.WebClientRequestException
          - org.springframework.web.client.HttpServerErrorException
          - org.springframework.web.client.ResourceAccessException
          - java.io.IOException
          - java.util.concurrent.TimeoutException
          - java.net.ConnectException
          - io.netty.handler.timeout.ReadTimeoutException
          - org.springframework.web.reactive.function.client.WebClientResponseException

    instances:
      paymentApiClient:
        base-config: default


  bulkhead:
    instances:
      paymentApiClient:
        max-concurrent-calls: 50
        max-wait-duration: 10s

  thread-pool-bulkhead:
    instances:
      paymentLookupClient:
        core-thread-pool-size: 20
        max-thread-pool-size: 50
        queue-capacity: 50
        keepAliveDuration: 15s


  timelimiter:
    instances:
      paymentApiClient:
        timeoutDuration: 5s
        cancelRunningFuture: true

  retry:
    instances:
      paymentRetryApiClient:
        maxAttempts: 3
        waitDuration: 500ms
        retryExceptions:
          - org.springframework.web.client.HttpServerErrorException
          - org.springframework.web.client.ResourceAccessException
          - java.io.IOException
          - java.util.concurrent.TimeoutException
          - io.netty.handler.timeout.ReadTimeoutException
          - java.net.ConnectException
          - org.springframework.web.reactive.function.client.WebClientRequestException
          - com.team33.moduleexternalapi.exception.ExternalApiException
        ignoreExceptions:
          - com.team33.moduleexternalapi.exception.PaymentApiException

      paymentLookUpClient:
        maxAttempts: 5
        waitDuration: 1000ms
        enableExponentialBackoff: true
        exponentialBackoffMultiplier: 2
        retryExceptions:
          - org.springframework.web.client.HttpServerErrorException
          - org.springframework.web.client.ResourceAccessException
          - java.io.IOException
          - java.util.concurrent.TimeoutException
          - java.net.ConnectException
        ignoreExceptions:
          - com.team33.moduleexternalapi.exception.PaymentApiException

jwt:
  secret-key: sdfsdfsdfesdfdf11113456645454534545451
  access-token-expiration-minutes: 30
  refresh-token-expiration-minutes: 420

logging:
  config: classpath:logback-local.xml


#  level:
#    org:
#      hibernate:
#        SQL: DEBUG
#    io.github.resilience4j.circuitbreaker: DEBUG




